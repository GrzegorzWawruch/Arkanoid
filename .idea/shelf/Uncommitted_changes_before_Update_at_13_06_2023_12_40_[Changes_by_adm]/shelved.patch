Index: main.cpp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>#include <SFML/Graphics.hpp>\r\n#include <SFML/Window.hpp>\r\n#include <chrono>\r\n#include <thread>\r\n#include \"Ball.h\"\r\n#include \"Paddle.h\"\r\n#include \"Menu.h\"\r\n#include \"Block.h\"\r\n#include \"Explosiveblock.h\"\r\n\r\n\r\nusing namespace std;\r\nusing namespace sf;\r\n\r\ntemplate<class C1, class C2>\r\nbool exist_Collision(C1 &A, C2 &B) {\r\n    return A.right() >= B.left() && A.left() <= B.right()\r\n           && A.bottom() >= B.top() && A.top() <= B.bottom();\r\n} //declaration function that describe collision\r\n\r\nbool collision(Paddle &paddle, Ball &ball) {\r\n    if (!exist_Collision(paddle, ball)) {\r\n        return false;\r\n    }\r\n\r\n    ball.move_up_ball();\r\n\r\n    if (ball.getPosition().x < paddle.get_position().x) {\r\n        ball.move_left_ball();\r\n    } else if (ball.getPosition().x > paddle.get_position().x) {\r\n        ball.move_right_ball();\r\n    }\r\n\r\n\r\n    return true;\r\n}//declaration function that describe collision between ball and paddle\r\nint score = 0;\r\n\r\nExplosiveblock exblock(500, 500, 100, 60);\r\n\r\nbool collision(Block &block, Ball &ball) {\r\n\r\n    if (!exist_Collision(block, ball)) {\r\n        return false;\r\n    }\r\n    if (!block.destroyed) {\r\n        if (exist_Collision(exblock, ball)) {\r\n            exblock.destroy();\r\n            score = score + 50;\r\n        }\r\n\r\n        block.destroy();\r\n        score++;\r\n        float overlap_Left{ball.right() - block.left()};\r\n        float overlap_Right{block.right() - ball.left()};\r\n        float overlap_Top{ball.bottom() - block.top()};\r\n        float overlap_Bottom{block.bottom() - ball.top()};\r\n\r\n        bool ball_from_left(abs(overlap_Left) < abs(overlap_Right));\r\n        bool ball_from_top(abs(overlap_Top) < abs(overlap_Bottom));\r\n\r\n        float min_overlap_x{ball_from_left ? overlap_Left : overlap_Right};\r\n        float min_overlap_y{ball_from_top ? overlap_Top : overlap_Bottom};\r\n\r\n        if (abs(min_overlap_x) < abs(min_overlap_y)) {\r\n            ball_from_left ? ball.move_left_ball() : ball.move_right_ball();\r\n        } else {\r\n            ball_from_top ? ball.move_up_ball() : ball.move_down_ball();\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n}   //declaration function that describe collision between ball and blocks\r\n\r\n\r\nint main() {\r\n\r\n\r\n    int menu_options = 1;\r\n    /***************************************************************\r\n     *          menu_options           *          Function         *\r\n     * ____________________________________________________________*\r\n     *            -1                   *         close             *\r\n     *             0                   *         Game              *\r\n     *             1                   *         MainMenu          *\r\n     *             2                   *         instructions      *\r\n     *             3                   *                           *\r\n     ***************************************************************\r\n     */\r\n\r\n    Ball ball(500, 500);\r\n    Paddle paddle(950, 950);\r\n    RenderWindow window(VideoMode(1650, 1050), \"Arcanoid\");\r\n    Menu menu(1920, 1080);\r\n    Texture mainmenu_photo;\r\n    Texture instruction_photo;\r\n    instruction_photo.loadFromFile(\"instrukcja.png\");\r\n    mainmenu_photo.loadFromFile(\"obraz.png\");\r\n    Sprite photo;\r\n    Text endgame;\r\n    photo.setTexture(mainmenu_photo);\r\n    window.setFramerateLimit(60);\r\n    Event event;\r\n    std::chrono::milliseconds waiting_time(200);\r\n    unsigned blocks_x{15}, blocks_y{4}, block_width{100}, block_height{60};\r\n    vector<Block> blocks;\r\n    exblock.draw_number();\r\n    for (int i = 0; i < blocks_y; i++) {\r\n        for (int j = 0; j < blocks_x; j++) {\r\n            if (i == exblock.draw_number_y && j == exblock.draw_number_x) {\r\n\r\n                exblock.set_position();\r\n                blocks.emplace_back(exblock);\r\n            } else {\r\n                Block block((j + 1) * (block_width + 5), (i + 1) * (block_height + 5), block_width, block_height);\r\n                blocks.emplace_back(block);\r\n            }\r\n        }\r\n    } //block making loop\r\n\r\n\r\n    while (true) //main loop\r\n    {\r\n        if (menu_options == 1) {\r\n            while (window.isOpen()) {\r\n                while (window.pollEvent(event)) {\r\n                    if (event.type == Event::Closed) {\r\n                        window.close();\r\n                        return 0;\r\n                    }\r\n\r\n                    if (event.type == Event::KeyPressed) {\r\n                        if (event.key.code == Keyboard::Up) {\r\n                            menu.move_up();\r\n                        } else if (event.key.code == Keyboard::Down) {\r\n                            menu.move_down();\r\n                        } else if (event.key.code == Keyboard::Return) {\r\n                            if (menu.pressed() == 0) {\r\n                                menu_options = 0;\r\n                            }\r\n                            if (menu.pressed() == 1) {\r\n                                menu_options = 2;\r\n                            }\r\n                            if (menu.pressed() == 2) {\r\n                                menu_options = -1;\r\n                            }\r\n                        }\r\n                    }\r\n\r\n\r\n                } //loop with mein menu\r\n                window.clear();\r\n                if (menu_options != 1) {\r\n                    break;\r\n                }\r\n                window.draw(photo);\r\n                menu.draw(window);\r\n                window.display();\r\n            }\r\n\r\n            if (menu_options == -1) //close game option\r\n            {\r\n                window.close();\r\n                break;\r\n            } else if (menu_options == 0) //play game option\r\n            {\r\n                while (menu_options == 0) {\r\n                    while (window.isOpen()) {\r\n\r\n                        window.clear(Color::Black);\r\n                        window.pollEvent(event);\r\n\r\n                        if (event.type == Event::Closed) {\r\n                            window.close();\r\n                            return 0;\r\n                        }\r\n\r\n                        ball.update();\r\n                        paddle.update();\r\n                        collision(paddle, ball);\r\n                        for (auto &block: blocks) {\r\n\r\n                            if (collision(block, ball)) {\r\n                                break;\r\n                            }\r\n\r\n                        }\r\n\r\n                        auto iterator = remove_if(begin(blocks), end(blocks),\r\n                                                  [](Block &block) { return block.is_destroyed(); });\r\n                        blocks.erase(iterator, end(blocks));\r\n\r\n\r\n                        if (exblock.destroyed == true) {\r\n                            for (auto &block: blocks) {\r\n                                if ((((block.position().x == (((exblock.draw_number_x + 1) - 1) * 105) &&\r\n                                       block.position().y == ((exblock.draw_number_y + 1) - 1) * 65)))\r\n                                    || (((block.position().x == (((exblock.draw_number_x + 1) + 1) * 105) &&\r\n                                          block.position().y == ((exblock.draw_number_y + 1)) * 65)))\r\n                                    || (((block.position().x == (((exblock.draw_number_x + 1) - 1) * 105) &&\r\n                                          block.position().y == (exblock.draw_number_y + 1) * 65)))\r\n                                    || (((block.position().x == (((exblock.draw_number_x + 1) - 1) * 105) &&\r\n                                          block.position().y == ((exblock.draw_number_y + 1) + 1) * 65)))\r\n                                    || (((block.position().x == (((exblock.draw_number_x + 1)) * 105) &&\r\n                                          block.position().y == ((exblock.draw_number_y + 1) + 1) * 65)))\r\n                                    || (((block.position().x == ((exblock.draw_number_x + 1) * 105) &&\r\n                                          block.position().y == ((exblock.draw_number_y + 1) - 1) * 65)))\r\n                                    || (((block.position().x == (((exblock.draw_number_x + 1) + 1) * 105) &&\r\n                                          block.position().y == ((exblock.draw_number_y + 1) + 1) * 65)))\r\n                                    || (((block.position().x == (((exblock.draw_number_x + 1)) * 105) &&\r\n                                          block.position().y == ((exblock.draw_number_y + 1)) * 65)))\r\n                                    || (((block.position().x == (((exblock.draw_number_x + 1) + 1) * 105) &&\r\n                                          block.position().y == ((exblock.draw_number_y + 1) - 1) * 65)))) {\r\n                                    block.destroy();\r\n                                }\r\n                            }\r\n                        } //loop destroying blocks all around explosive block\r\n\r\n\r\n\r\n\r\n                        if (ball.getPosition().y > paddle.top()) {\r\n                            paddle.stop_paddle();\r\n                            ball.under_paddle();\r\n                            Font font;\r\n                            if (!font.loadFromFile(\"Bambuchinnox.ttf\")) {\r\n                                return -1;\r\n                            }\r\n                            Text endgame(\"THE END\", font, 100);\r\n                            endgame.setFillColor(Color::White);\r\n                            endgame.setPosition(window.getSize().x / 2.f - endgame.getGlobalBounds().width / 2.f,\r\n                                                window.getSize().y / 2.f - endgame.getGlobalBounds().height / 2.f -\r\n                                                15.f);\r\n                            window.draw(endgame);\r\n                            //wyświetlanie punktów;\r\n                            Text score_text(\"Total Score: \" + to_string(score), font, 60);\r\n                            score_text.setFillColor(Color::White);\r\n                            score_text.setPosition(window.getSize().x / 2.f - score_text.getGlobalBounds().width / 2.f,\r\n                                                   window.getSize().y / 2.f + endgame.getGlobalBounds().height / 2.f +\r\n                                                   score_text.getGlobalBounds().height / 2.f);\r\n                            window.draw(score_text);\r\n                            paddle.stop_paddle();\r\n                            menu.draw_end_menu(window);\r\n                            if (event.type == Event::KeyPressed) {\r\n                                if (event.key.code == Keyboard::Left) {\r\n                                    menu.move_left();\r\n                                    std::this_thread::sleep_for(waiting_time);\r\n                                } else if (event.key.code == Keyboard::Right) {\r\n                                    menu.move_right();\r\n                                    std::this_thread::sleep_for(waiting_time);\r\n                                } else if (event.key.code == Keyboard::Return) {\r\n                                    if (menu.pressed() == 0) //new game options\r\n                                    {\r\n                                        menu.all_on_white();\r\n                                        ball.reset_ball();\r\n\r\n                                        for (auto &block: blocks) {\r\n                                            if (!block.destroyed) {\r\n                                                block.destroy();\r\n                                            }\r\n                                        }\r\n                                        exblock.restore();\r\n                                        exblock.restore();\r\n                                        exblock.draw_number();\r\n                                        for (int i = 0; i < blocks_y; i++) {\r\n                                            for (int j = 0; j < blocks_x; j++) {\r\n                                                if (i == exblock.draw_number_y && j == exblock.draw_number_x) {\r\n                                                    exblock.set_position();\r\n                                                    blocks.emplace_back(exblock);\r\n                                                } else {\r\n                                                    Block block((j + 1) * (block_width + 5),\r\n                                                                (i + 1) * (block_height + 5), block_width,\r\n                                                                block_height);\r\n                                                    blocks.emplace_back(block);\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        score = 0;\r\n                                        break;\r\n\r\n                                    }\r\n                                    if (menu.pressed() == 1) //back to menu options\r\n                                    {\r\n                                        score = 0;\r\n                                        menu_options = 1;\r\n                                        menu.all_on_white();\r\n                                        ball.reset_ball();\r\n                                        paddle.reset_paddle();\r\n                                        paddle.stop_paddle();\r\n                                        exblock.restore();\r\n                                        for (auto &block: blocks) {\r\n                                            if (!block.destroyed) {\r\n                                                block.destroy();\r\n                                            }\r\n                                        }\r\n                                        exblock.draw_number();\r\n                                        for (int i = 0; i < blocks_y; i++) {\r\n                                            for (int j = 0; j < blocks_x; j++) {\r\n                                                if (i == exblock.draw_number_y && j == exblock.draw_number_x) {\r\n                                                    Explosiveblock exblock((j + 1) * (block_width + 5),\r\n                                                                           (i + 1) * (block_height + 5), block_width,\r\n                                                                           block_height);\r\n                                                    blocks.emplace_back(exblock);\r\n                                                } else {\r\n                                                    Block block((j + 1) * (block_width + 5),\r\n                                                                (i + 1) * (block_height + 5), block_width,\r\n                                                                block_height);\r\n                                                    blocks.emplace_back(block);\r\n                                                }\r\n                                            }\r\n                                        }\r\n                                        break;\r\n\r\n                                    }\r\n                                    if (menu.pressed() == 2) {\r\n                                        menu_options = -1;\r\n                                    }\r\n                                }\r\n                            }\r\n                            paddle.reset_paddle();\r\n\r\n                        }//decision describing what will happen if the ball falls under the paddle\r\n                        paddle.restore_velocity();\r\n                        ball.stop_game();\r\n                        if (ball.is_stopped == true)// decision describing what will happen if we stop the game\r\n                        {\r\n                            if (ball.getPosition().y <= paddle.top()) // zapobiega wyświetlaniu pause po zakończeniu gry\r\n                            {\r\n                                paddle.stop_paddle();\r\n                                Font font;\r\n                                if (!font.loadFromFile(\"Bambuchinnox.ttf\")) {\r\n                                    return -1;\r\n                                }\r\n                                Text pause(\"PAUSE\", font, 100);\r\n                                pause.setFillColor(Color::White);\r\n                                pause.setPosition(1650 / 2.f - pause.getGlobalBounds().width / 2.f,\r\n                                                  1050 / 2.f - pause.getGlobalBounds().height / 2.f);\r\n                                window.draw(pause);\r\n                            }\r\n\r\n                        }\r\n\r\n                        Font font;                                              //display score\r\n                        if (!font.loadFromFile(\"Bambuchinnox.ttf\")) {\r\n                            return -1;\r\n                        }\r\n                        Text score_text(\"Score: \" + to_string(score), font, 20);\r\n                        score_text.setFillColor(Color::White);\r\n                        score_text.setPosition(10.f, 10.f);\r\n                        window.draw(score_text);\r\n\r\n\r\n                        ball.update();\r\n                        paddle.update();\r\n                        window.draw(ball.get_shape());\r\n                        window.draw(paddle.get_shape());\r\n\r\n                        for (auto &block: blocks) {\r\n                            window.draw(block.get_shape());\r\n                        } //draw a blocks\r\n                        window.display();\r\n                        if (blocks.empty()) {\r\n                            exblock.draw_number();\r\n                            for (int i = 0; i < blocks_y; i++) {\r\n                                for (int j = 0; j < blocks_x; j++) {\r\n                                    if (i == exblock.draw_number_y && j == exblock.draw_number_x) {\r\n                                        Explosiveblock exblock((j + 1) * (block_width + 5),\r\n                                                               (i + 1) * (block_height + 5), block_width, block_height);\r\n                                        blocks.emplace_back(exblock);\r\n                                    } else {\r\n                                        Block block((j + 1) * (block_width + 5), (i + 1) * (block_height + 5),\r\n                                                    block_width, block_height);\r\n                                        blocks.emplace_back(block);\r\n                                    }\r\n                                }\r\n                            }\r\n                        } // function describing what will happen if all blocks are destroyed\r\n                    }\r\n                }\r\n            } else if (menu_options == 2) {\r\n                while (window.isOpen()) {\r\n                    window.clear(Color::Black);\r\n                    window.pollEvent(event);\r\n\r\n                    if (event.type == Event::Closed) {\r\n                        window.close();\r\n                        return 0;\r\n                    }\r\n\r\n                    // Rysowanie obrazka instrukcji\r\n                    Sprite instructionSprite(instruction_photo);\r\n\r\n                    // Ustawienie pozycji na środku okna\r\n                    float posX = (window.getSize().x - instructionSprite.getGlobalBounds().width) / 2.f;\r\n                    float posY = (window.getSize().y - instructionSprite.getGlobalBounds().height) / 2.f;\r\n                    instructionSprite.setPosition(posX, posY);\r\n\r\n                    window.draw(instructionSprite);\r\n\r\n                    // Rysowanie przycisku \"Back\"\r\n                    RectangleShape backButton(Vector2f(100.f, 40.f));\r\n                    backButton.setFillColor(Color::Red);\r\n                    backButton.setPosition(\r\n                            posX / 5 + instructionSprite.getGlobalBounds().width - 7 * backButton.getSize().x,\r\n                            posY + instructionSprite.getGlobalBounds().height - backButton.getSize().y - 200.f);\r\n                    window.draw(backButton);\r\n\r\n                    // Tworzenie tekstu \"Back\"\r\n                    Font font;\r\n                    if (!font.loadFromFile(\"Bambuchinnox.ttf\")) // Ścieżka do pliku czcionki\r\n                    {\r\n                        return -1;\r\n                    }\r\n                    Text backText(\"Back\", font, 20); // Tekst \"Back\" z czcionką i rozmiarem 20\r\n                    backText.setFillColor(Color::White);\r\n                    backText.setPosition(backButton.getPosition().x + backButton.getSize().x / 2.f -\r\n                                         backText.getGlobalBounds().width / 2.f,\r\n                                         backButton.getPosition().y + backButton.getSize().y / 3.f -\r\n                                         backText.getGlobalBounds().height / 2.f);\r\n                    window.draw(backText);\r\n\r\n                    window.display();\r\n\r\n                    if (event.type == Event::KeyPressed && event.key.code == Keyboard::Escape) {\r\n                        menu_options = 1; // Przejście do menu głównego po naciśnięciu klawisza Escape\r\n                        break;\r\n                    }\r\n\r\n                    if (event.type == Event::MouseButtonReleased && event.mouseButton.button == Mouse::Left) {\r\n                        // Sprawdzenie, czy kliknięcie myszką nastąpiło na przycisku \"Back\"\r\n                        Vector2f mousePosition = window.mapPixelToCoords(\r\n                                Vector2i(event.mouseButton.x, event.mouseButton.y));\r\n\r\n                        if (backButton.getGlobalBounds().contains(mousePosition)) {\r\n                            menu_options = 1; // Przejście do menu głównego po kliknięciu przycisku \"Back\"\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            } //show instruction option\r\n        }\r\n    }\r\n}\r\n\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main.cpp b/main.cpp
--- a/main.cpp	(revision 06ba9f31ff2291df4445611f8f92612a70ba2401)
+++ b/main.cpp	(date 1686652543976)
@@ -8,7 +8,6 @@
 #include "Block.h"
 #include "Explosiveblock.h"
 
-
 using namespace std;
 using namespace sf;
 
@@ -148,7 +147,6 @@
                         }
                     }
 
-
                 } //loop with mein menu
                 window.clear();
                 if (menu_options != 1) {
